/**
  @file WriteHittreeAll.hpp
  @author Goro Yabu
  @date 2019/06/23
  @version 1.0
  @note This file is generated by mkwritetree.
**/
#ifndef WriteHittreeAll_hpp
#define WriteHittreeAll_hpp

#include <vector>
#include <string>
#include <iostream>

#include <TFile.h>
#include <TTree.h>
#include <TTreeReader.h>

#include <ANLModuleBase.hpp>
#include <ANLCross.hpp>

class WriteHittreeAll : public anlcross::ANLModuleBase
{
protected:
    TFile * m_file;
    TTree * m_tree;
    std::string m_file_name;
    std::string m_tree_name;

public:
    WriteHittreeAll();
    ~WriteHittreeAll(){}
    void mod_init(int &status) override;
    void mod_com(int &status) override;
    //void mod_bgnrun(int &status) override;
    void mod_ana(int &status) override;
    //void mod_endrun(int &status) override;
    void mod_exit(int &status) override;

    virtual int set_write_branch();
    
    static TFile * OpenTFile(std::string name, std::string option);

    template<typename T>
    int define_branch(std::string key, std::string leaflist);
    template<typename T>
    int define_branch(std::string key,
		      std::string leaflist, int maxsize);
};

template<typename T>
int WriteHittreeAll::define_branch(std::string key, std::string leaflist)
{
    if( bnk::bnk_is_def(key)==bnk::BNK_NG ) return anlcross::ANL_NG;
    if( !m_tree->Branch(key.c_str(), bnk::bnk_ptr<T>(key), leaflist.c_str()) ) return anlcross::ANL_NG;
    return anlcross::ANL_OK;
}
template<typename T>
int WriteHittreeAll::define_branch(std::string key, std::string leaflist, int maxsize)
{
    if( bnk::bnk_is_def(key)==bnk::BNK_NG ) return anlcross::ANL_NG;
    if( !m_tree->Branch(key.c_str(), bnk::bnk_ptr<T>(key), leaflist.c_str()) ) return anlcross::ANL_NG;
    return anlcross::ANL_OK;
}

#endif

