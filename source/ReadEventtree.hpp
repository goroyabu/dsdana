/**
  @file ReadEventtree.hpp
  @author Goro Yabu
  @date 2019/06/23
  @version 1.0
  @note This file is generated by mkreadtree.
**/
#ifndef ReadEventtree_hpp
#define ReadEventtree_hpp

#include <string>
#include <iostream>

#include <TFile.h>
#include <TTree.h>
#include <TTreeReader.h>

#include <ANLModuleBase.hpp>
#include <ANLCross.hpp>

class ReadEventtree : public anlcross::ANLModuleBase
{
protected:
    TFile * m_file;
    TTreeReader m_tree_reader;
    std::string m_file_name;
    std::string m_tree_name;
    long int m_current_entry;
    long int m_max_entry;

public:
    ReadEventtree();
    ~ReadEventtree(){}
    void mod_init(int &status) override;
    void mod_com(int &status) override;
    //void mod_bgnrun(int &status) override;
    void mod_ana(int &status) override;
    //void mod_endrun(int &status) override;
    void mod_exit(int &status) override;

    virtual int set_read_branch();

    template<typename T>
    int read_branch(std::string key);
    template<typename T>
    int read_branch_array(std::string key, int maxsize);
    
    static TFile * OpenTFile(std::string name, std::string option);
    static int GetTTreeReader(std::string name, TFile * file, TTreeReader* reader);
};

template<typename T>
int ReadEventtree::read_branch(std::string key)
{
    bnk::bnk_def<T>(key);
    bnk::bnk_resize<T>(key, 1);
    if( !(m_tree_reader.GetTree())->FindBranch(key.c_str()) ){
	return anlcross::ANL_NG;
    }
    m_tree_reader.GetTree()->SetBranchAddress(key.c_str(), bnk::bnk_ptr<T>(key));
    return anlcross::ANL_OK;
}
template<typename T>
int ReadEventtree::read_branch_array(std::string key, int maxsize)
{
    bnk::bnk_def<T>(key, maxsize);
    bnk::bnk_resize<T>(key, maxsize);
    if( !(m_tree_reader.GetTree())->FindBranch(key.c_str()) ){
	return anlcross::ANL_NG;
    }
    m_tree_reader.GetTree()->SetBranchAddress(key.c_str(), bnk::bnk_ptr<T>(key));
    return anlcross::ANL_OK;
}

#endif

