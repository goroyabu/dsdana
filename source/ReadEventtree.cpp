/**
  @file ReadEventtree.cpp
  @author Goro Yabu
  @date 2019/06/23
  @version 1.0
  @note This file is generated by mkreadtree.
**/
#include "ReadEventtree.hpp"

ReadEventtree::ReadEventtree() :
    ANLModuleBase("ReadEventtree", "2.1"),
    m_file(nullptr), m_file_name("in.root"), m_tree_name("TTree")
{
}

void ReadEventtree::mod_init(int &status)
{
    status = anlcross::ANL_OK;

    m_file = OpenTFile(m_file_name, "read");
    if( !m_file ) status = anlcross::ANL_NG;

    if( status == anlcross::ANL_OK )
    status = GetTTreeReader(m_tree_name, m_file, &m_tree_reader);

    m_current_entry = -1;
    m_max_entry = m_tree_reader.GetTree()->GetEntries();

    if( status == anlcross::ANL_OK )
    status = set_read_branch();
}

void ReadEventtree::mod_com(int &status)
{
    status = anlcross::ANL_OK;
    com_cli::read_value<std::string>("Input ROOT TFile Name ?", &m_file_name);
    com_cli::read_value<std::string>("           TTree Name ?", &m_tree_name);
}

void ReadEventtree::mod_ana(int &status)
{
    status = anlcross::ANL_OK;
    ++m_current_entry;
    if(m_current_entry>=m_max_entry){
        status = anlcross::ANL_QUIT;
    }else{
        m_tree_reader.GetTree()->GetEntry(m_current_entry);
        status = anlcross::ANL_OK;
    }
}

void ReadEventtree::mod_exit(int &status)
{
    status = anlcross::ANL_OK;
    if( m_file!=nullptr ) m_file->Close();
}

TFile * ReadEventtree::OpenTFile(std::string name, std::string option)
{
    TFile * file = new TFile(name.c_str(), option.c_str());
    if( !file || file->IsZombie() ) return nullptr;
    std::cout << "ReadEventtree::OpenTFile ";
    std::cout << name << std::endl;
    return file;
}
int ReadEventtree::GetTTreeReader(std::string name, TFile * file, TTreeReader* reader)
{
    reader->SetTree((TTree*)file->Get(name.c_str()));
    if( reader->IsZombie() ) return anlcross::ANL_NG;
    std::cout << "ReadEventtree::GetTTreeReader ";
    std::cout << name << std::endl;
    return anlcross::ANL_OK;
}

int ReadEventtree::set_read_branch()
{
    read_branch<unsigned int>(                   "livetime");
    read_branch<unsigned int>(                   "unixtime");
    read_branch<unsigned int>(                   "ti_upper");
    read_branch<unsigned int>(                   "ti_lower");
    read_branch<unsigned int>(               "ext1ti_upper");
    read_branch<unsigned int>(               "ext1ti_lower");
    read_branch<unsigned int>(               "ext2ti_upper");
    read_branch<unsigned int>(               "ext2ti_lower");
    read_branch<unsigned short int>(                    "hitnum0");
    read_branch<unsigned short int>(                       "cmn0");
    read_branch_array<unsigned short int>(              "index0",   64);
    read_branch_array<unsigned short int>(                "adc0",   64);
    read_branch<unsigned short int>(                    "hitnum1");
    read_branch<unsigned short int>(                       "cmn1");
    read_branch_array<unsigned short int>(              "index1",   64);
    read_branch_array<unsigned short int>(                "adc1",   64);
    read_branch<unsigned short int>(                    "hitnum2");
    read_branch<unsigned short int>(                       "cmn2");
    read_branch_array<unsigned short int>(              "index2",   64);
    read_branch_array<unsigned short int>(                "adc2",   64);
    read_branch<unsigned short int>(                    "hitnum3");
    read_branch<unsigned short int>(                       "cmn3");
    read_branch_array<unsigned short int>(              "index3",   64);
    read_branch_array<unsigned short int>(                "adc3",   64);
    read_branch<unsigned short int>(                    "hitnum4");
    read_branch<unsigned short int>(                       "cmn4");
    read_branch_array<unsigned short int>(              "index4",   64);
    read_branch_array<unsigned short int>(                "adc4",   64);
    read_branch<unsigned short int>(                    "hitnum5");
    read_branch<unsigned short int>(                       "cmn5");
    read_branch_array<unsigned short int>(              "index5",   64);
    read_branch_array<unsigned short int>(                "adc5",   64);
    read_branch<unsigned short int>(                    "hitnum6");
    read_branch<unsigned short int>(                       "cmn6");
    read_branch_array<unsigned short int>(              "index6",   64);
    read_branch_array<unsigned short int>(                "adc6",   64);
    read_branch<unsigned short int>(                    "hitnum7");
    read_branch<unsigned short int>(                       "cmn7");
    read_branch_array<unsigned short int>(              "index7",   64);
    read_branch_array<unsigned short int>(                "adc7",   64);

    return anlcross::ANL_OK;
}

